"use strict";
/**
 * Created by user on 2019/4/11.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const packageJson = require("../package.json");
const index_1 = require("../index");
const debug_color2_1 = require("debug-color2");
(async () => {
    const version = packageJson.config.version;
    const hash = packageJson.config.hash;
    debug_color2_1.console.log(`remove`, index_1.__releases_SourceTreePortable);
    await fs.remove(index_1.__releases_SourceTreePortable).catch(e => debug_color2_1.console.error(e.message));
    let _path_data_app = path.join(index_1.__releases_SourceTreePortable, 'Data', 'ClientFiles', `SourceTree.exe_Url_${hash}`, version);
    await fs.ensureDir(_path_data_app);
    await copy(index_1.__root_SourceTreePortable, index_1.__releases_SourceTreePortable);
    await copy(path.join(index_1.__root_SourceTreePortable, 'App/DefaultData/user.config'), path.join(_path_data_app, 'user.config'));
    await copy(path.join(index_1.__root_SourceTreePortable, 'App/DefaultData/user.config'), path.join(index_1.__releases_SourceTreePortable, 'Data', 'user.config'));
    await copy(path.join(index_1.__releases_SourceTreePortable, 'Data', 'ClientFiles'), path.join(index_1.__releases_SourceTreePortable, 'App/DefaultData/ClientFiles'));
})();
function copy(from, to) {
    debug_color2_1.console.log('copy', to);
    return fs.copy(from, to, {
        overwrite: true,
        preserveTimestamps: true,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnVpbGQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSCwrQkFBZ0M7QUFDaEMsNkJBQThCO0FBQzlCLCtDQUFnRDtBQUNoRCxvQ0FBb0Y7QUFDcEYsK0NBQXVDO0FBRXZDLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFFWCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUMzQyxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUVyQyxzQkFBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUscUNBQTZCLENBQUMsQ0FBQztJQUNyRCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMscUNBQTZCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxzQkFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUVwRixJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUE2QixFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsc0JBQXNCLElBQUksRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTVILE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUVuQyxNQUFNLElBQUksQ0FBQyxpQ0FBeUIsRUFBRSxxQ0FBNkIsQ0FBQyxDQUFDO0lBRXJFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUNBQXlCLEVBQUUsNkJBQTZCLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzFILE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUNBQXlCLEVBQUUsNkJBQTZCLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUE2QixFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBRWpKLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscUNBQTZCLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMscUNBQTZCLEVBQUUsNkJBQTZCLENBQUMsQ0FBQyxDQUFDO0FBRXRKLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFTCxTQUFTLElBQUksQ0FBQyxJQUFZLEVBQUUsRUFBVTtJQUVyQyxzQkFBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFeEIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUU7UUFDeEIsU0FBUyxFQUFFLElBQUk7UUFDZixrQkFBa0IsRUFBRSxJQUFJO0tBQ3hCLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE5LzQvMTEuXG4gKi9cblxuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IHBhY2thZ2VKc29uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XG5pbXBvcnQgeyBfX3JlbGVhc2VzX1NvdXJjZVRyZWVQb3J0YWJsZSwgX19yb290X1NvdXJjZVRyZWVQb3J0YWJsZSB9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IGNvbnNvbGUgfSBmcm9tICdkZWJ1Zy1jb2xvcjInO1xuXG4oYXN5bmMgKCkgPT5cbntcblx0Y29uc3QgdmVyc2lvbiA9IHBhY2thZ2VKc29uLmNvbmZpZy52ZXJzaW9uO1xuXHRjb25zdCBoYXNoID0gcGFja2FnZUpzb24uY29uZmlnLmhhc2g7XG5cblx0Y29uc29sZS5sb2coYHJlbW92ZWAsIF9fcmVsZWFzZXNfU291cmNlVHJlZVBvcnRhYmxlKTtcblx0YXdhaXQgZnMucmVtb3ZlKF9fcmVsZWFzZXNfU291cmNlVHJlZVBvcnRhYmxlKS5jYXRjaChlID0+IGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKSk7XG5cblx0bGV0IF9wYXRoX2RhdGFfYXBwID0gcGF0aC5qb2luKF9fcmVsZWFzZXNfU291cmNlVHJlZVBvcnRhYmxlLCAnRGF0YScsICdDbGllbnRGaWxlcycsIGBTb3VyY2VUcmVlLmV4ZV9VcmxfJHtoYXNofWAsIHZlcnNpb24pO1xuXG5cdGF3YWl0IGZzLmVuc3VyZURpcihfcGF0aF9kYXRhX2FwcCk7XG5cblx0YXdhaXQgY29weShfX3Jvb3RfU291cmNlVHJlZVBvcnRhYmxlLCBfX3JlbGVhc2VzX1NvdXJjZVRyZWVQb3J0YWJsZSk7XG5cblx0YXdhaXQgY29weShwYXRoLmpvaW4oX19yb290X1NvdXJjZVRyZWVQb3J0YWJsZSwgJ0FwcC9EZWZhdWx0RGF0YS91c2VyLmNvbmZpZycpLCBwYXRoLmpvaW4oX3BhdGhfZGF0YV9hcHAsICd1c2VyLmNvbmZpZycpKTtcblx0YXdhaXQgY29weShwYXRoLmpvaW4oX19yb290X1NvdXJjZVRyZWVQb3J0YWJsZSwgJ0FwcC9EZWZhdWx0RGF0YS91c2VyLmNvbmZpZycpLCBwYXRoLmpvaW4oX19yZWxlYXNlc19Tb3VyY2VUcmVlUG9ydGFibGUsICdEYXRhJywgJ3VzZXIuY29uZmlnJykpO1xuXG5cdGF3YWl0IGNvcHkocGF0aC5qb2luKF9fcmVsZWFzZXNfU291cmNlVHJlZVBvcnRhYmxlLCAnRGF0YScsICdDbGllbnRGaWxlcycpLCBwYXRoLmpvaW4oX19yZWxlYXNlc19Tb3VyY2VUcmVlUG9ydGFibGUsICdBcHAvRGVmYXVsdERhdGEvQ2xpZW50RmlsZXMnKSk7XG5cbn0pKCk7XG5cbmZ1bmN0aW9uIGNvcHkoZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nKVxue1xuXHRjb25zb2xlLmxvZygnY29weScsIHRvKTtcblxuXHRyZXR1cm4gZnMuY29weShmcm9tLCB0bywge1xuXHRcdG92ZXJ3cml0ZTogdHJ1ZSxcblx0XHRwcmVzZXJ2ZVRpbWVzdGFtcHM6IHRydWUsXG5cdH0pO1xufVxuIl19