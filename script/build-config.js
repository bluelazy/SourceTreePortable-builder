"use strict";
/**
 * Created by user on 2019/4/11.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const packageJson = require("../package.json");
const index_1 = require("../index");
const debug_color2_1 = require("debug-color2");
(async () => {
    const version = packageJson.config.version;
    const hash = packageJson.config.hash;
    debug_color2_1.console.log(`remove`, index_1.__releases_SourceTreePortable);
    await fs.remove(index_1.__releases_SourceTreePortable).catch(e => debug_color2_1.console.error(e.message));
    let _path_data_app = path.join(index_1.__releases_SourceTreePortable, 'Data', 'ClientFiles', `SourceTree.exe_Url_${hash}`, version);
    let _path_default_data = path.join(index_1.__releases_SourceTreePortable, 'App/DefaultData');
    //await fs.ensureDir(_path_data_app);
    await copy(index_1.__root_SourceTreePortable, index_1.__releases_SourceTreePortable);
    //await copy(path.join(__root_SourceTreePortable, 'App/DefaultData/user.config'), path.join(_path_data_app, 'user.config'));
    await copy(path.join(index_1.__root_SourceTreePortable, 'App/DefaultData/user.config'), path.join(index_1.__releases_SourceTreePortable, 'Data', 'user.config'));
    //await copy(path.join(__releases_SourceTreePortable, 'Data', 'ClientFiles'), path.join(__releases_SourceTreePortable, 'App/DefaultData/ClientFiles'));
})();
function copy(from, to) {
    debug_color2_1.console.log('copy', to);
    return fs.copy(from, to, {
        overwrite: true,
        preserveTimestamps: true,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnVpbGQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSCwrQkFBZ0M7QUFDaEMsNkJBQThCO0FBQzlCLCtDQUFnRDtBQUNoRCxvQ0FBb0Y7QUFDcEYsK0NBQXVDO0FBRXZDLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFFWCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUMzQyxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUVyQyxzQkFBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUscUNBQTZCLENBQUMsQ0FBQztJQUNyRCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMscUNBQTZCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxzQkFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUVwRixJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLHFDQUE2QixFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsc0JBQXNCLElBQUksRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTVILElBQUksa0JBQWtCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxxQ0FBNkIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXJGLHFDQUFxQztJQUVyQyxNQUFNLElBQUksQ0FBQyxpQ0FBeUIsRUFBRSxxQ0FBNkIsQ0FBQyxDQUFDO0lBRXJFLDRIQUE0SDtJQUM1SCxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlDQUF5QixFQUFFLDZCQUE2QixDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxxQ0FBNkIsRUFBRSxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUVqSix1SkFBdUo7QUFFeEosQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMLFNBQVMsSUFBSSxDQUFDLElBQVksRUFBRSxFQUFVO0lBRXJDLHNCQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUV4QixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRTtRQUN4QixTQUFTLEVBQUUsSUFBSTtRQUNmLGtCQUFrQixFQUFFLElBQUk7S0FDeEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNC8xMS5cbiAqL1xuXG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgcGFja2FnZUpzb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKTtcbmltcG9ydCB7IF9fcmVsZWFzZXNfU291cmNlVHJlZVBvcnRhYmxlLCBfX3Jvb3RfU291cmNlVHJlZVBvcnRhYmxlIH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgY29uc29sZSB9IGZyb20gJ2RlYnVnLWNvbG9yMic7XG5cbihhc3luYyAoKSA9Plxue1xuXHRjb25zdCB2ZXJzaW9uID0gcGFja2FnZUpzb24uY29uZmlnLnZlcnNpb247XG5cdGNvbnN0IGhhc2ggPSBwYWNrYWdlSnNvbi5jb25maWcuaGFzaDtcblxuXHRjb25zb2xlLmxvZyhgcmVtb3ZlYCwgX19yZWxlYXNlc19Tb3VyY2VUcmVlUG9ydGFibGUpO1xuXHRhd2FpdCBmcy5yZW1vdmUoX19yZWxlYXNlc19Tb3VyY2VUcmVlUG9ydGFibGUpLmNhdGNoKGUgPT4gY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpKTtcblxuXHRsZXQgX3BhdGhfZGF0YV9hcHAgPSBwYXRoLmpvaW4oX19yZWxlYXNlc19Tb3VyY2VUcmVlUG9ydGFibGUsICdEYXRhJywgJ0NsaWVudEZpbGVzJywgYFNvdXJjZVRyZWUuZXhlX1VybF8ke2hhc2h9YCwgdmVyc2lvbik7XG5cblx0bGV0IF9wYXRoX2RlZmF1bHRfZGF0YSA9IHBhdGguam9pbihfX3JlbGVhc2VzX1NvdXJjZVRyZWVQb3J0YWJsZSwgJ0FwcC9EZWZhdWx0RGF0YScpO1xuXG5cdC8vYXdhaXQgZnMuZW5zdXJlRGlyKF9wYXRoX2RhdGFfYXBwKTtcblxuXHRhd2FpdCBjb3B5KF9fcm9vdF9Tb3VyY2VUcmVlUG9ydGFibGUsIF9fcmVsZWFzZXNfU291cmNlVHJlZVBvcnRhYmxlKTtcblxuXHQvL2F3YWl0IGNvcHkocGF0aC5qb2luKF9fcm9vdF9Tb3VyY2VUcmVlUG9ydGFibGUsICdBcHAvRGVmYXVsdERhdGEvdXNlci5jb25maWcnKSwgcGF0aC5qb2luKF9wYXRoX2RhdGFfYXBwLCAndXNlci5jb25maWcnKSk7XG5cdGF3YWl0IGNvcHkocGF0aC5qb2luKF9fcm9vdF9Tb3VyY2VUcmVlUG9ydGFibGUsICdBcHAvRGVmYXVsdERhdGEvdXNlci5jb25maWcnKSwgcGF0aC5qb2luKF9fcmVsZWFzZXNfU291cmNlVHJlZVBvcnRhYmxlLCAnRGF0YScsICd1c2VyLmNvbmZpZycpKTtcblxuXHQvL2F3YWl0IGNvcHkocGF0aC5qb2luKF9fcmVsZWFzZXNfU291cmNlVHJlZVBvcnRhYmxlLCAnRGF0YScsICdDbGllbnRGaWxlcycpLCBwYXRoLmpvaW4oX19yZWxlYXNlc19Tb3VyY2VUcmVlUG9ydGFibGUsICdBcHAvRGVmYXVsdERhdGEvQ2xpZW50RmlsZXMnKSk7XG5cbn0pKCk7XG5cbmZ1bmN0aW9uIGNvcHkoZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nKVxue1xuXHRjb25zb2xlLmxvZygnY29weScsIHRvKTtcblxuXHRyZXR1cm4gZnMuY29weShmcm9tLCB0bywge1xuXHRcdG92ZXJ3cml0ZTogdHJ1ZSxcblx0XHRwcmVzZXJ2ZVRpbWVzdGFtcHM6IHRydWUsXG5cdH0pO1xufVxuIl19