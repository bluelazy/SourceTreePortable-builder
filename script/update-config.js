"use strict";
/**
 * Created by user on 2019/4/12.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const packageJson = require("../package.json");
const index_1 = require("../index");
const debug_color2_1 = require("debug-color2");
const ini = require("ini");
(async () => {
    const version = packageJson.config.version;
    let _path = path.join(index_1.__root_SourceTreePortable, 'App', 'AppInfo', 'appinfo.ini');
    let _ini = await fs.readFile(_path, 'utf-8').then(ini.parse);
    _ini.Version.PackageVersion = version;
    _ini.Version.DisplayVersion = version.split('.').slice(0, 3).join('.');
    // @ts-ignore
    debug_color2_1.console.dir(_ini.Version);
    await fs.writeFile(_path, ini.stringify(_ini));
    let _nsh_context = `
!macro CustomCodePostInstall

; Prepare folder to extract with 7zip
CreateDirectory "$INSTDIR\\7zTemp"
SetOutPath "$INSTDIR\\7zTemp"
File "\${NSISDIR}\\..\\7zip\\7z.exe"
File "\${NSISDIR}\\..\\7zip\\7z.dll"
SetOutPath $INSTDIR
CreateDirectory "$INSTDIR\\Data"

inetc::get /CONNECTTIMEOUT 30 /NOCOOKIES /TRANSLATE "Downloading SourceTree..." "Connecting..." second minute hour s "%dkB (%d%%) of %dkB @ %d.%01dkB/s" " (%d %s%s remaining)" "https://product-downloads.atlassian.com/software/sourcetree/windows/ga/SourceTreeSetup-${_ini.Version.DisplayVersion}.exe" "$INSTDIR\\7zTemp\\SourceTreeSetup-${_ini.Version.DisplayVersion}.exe" /END

; Extract
ExecDOS::exec \`"$INSTDIR\\7zTemp\\7z.exe" e "$INSTDIR\\7zTemp\\SourceTreeSetup-${_ini.Version.DisplayVersion}.exe" "SourceTree-${_ini.Version.DisplayVersion}-full.nupkg" -o"$INSTDIR\\7zTemp"\` "" ""
ExecDOS::exec \`"$INSTDIR\\7zTemp\\7z.exe" x "$INSTDIR\\7zTemp\\SourceTree-${_ini.Version.DisplayVersion}-full.nupkg" "lib\\net45" -o"$INSTDIR\\7zTemp"\` "" ""
ExecDOS::exec \`xcopy "$INSTDIR\\7zTemp\\lib\\net45" "$INSTDIR\\App\\SourceTree" /S /i\` "" ""

; Cleanup
RMDir /r "$INSTDIR\\7zTemp"

!macroend

`;
    await fs.writeFile(path.join(index_1.__root_SourceTreePortable, 'Other/Source/PortableApps.comInstallerCustom.nsh'), _nsh_context);
    //	console.dir(_ini);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZS1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILCtCQUFnQztBQUNoQyw2QkFBOEI7QUFDOUIsK0NBQWdEO0FBQ2hELG9DQUFvRjtBQUNwRiwrQ0FBdUM7QUFDdkMsMkJBQTRCO0FBRTVCLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFFWCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUUzQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlDQUF5QixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFbEYsSUFBSSxJQUFJLEdBS0osTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXRELElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQztJQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXZFLGFBQWE7SUFDYixzQkFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFMUIsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFL0MsSUFBSSxZQUFZLEdBQUc7Ozs7Ozs7Ozs7OzBRQVdzUCxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsNENBQTRDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYzs7O2tGQUcxUixJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMscUJBQXFCLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYzs2RUFDaEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjOzs7Ozs7OztDQVF2RyxDQUFDO0lBRUQsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUNBQXlCLEVBQUUsa0RBQWtELENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUU1SCxxQkFBcUI7QUFFckIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNC8xMi5cbiAqL1xuXG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgcGFja2FnZUpzb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKTtcbmltcG9ydCB7IF9fcmVsZWFzZXNfU291cmNlVHJlZVBvcnRhYmxlLCBfX3Jvb3RfU291cmNlVHJlZVBvcnRhYmxlIH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgY29uc29sZSB9IGZyb20gJ2RlYnVnLWNvbG9yMic7XG5pbXBvcnQgaW5pID0gcmVxdWlyZSgnaW5pJyk7XG5cbihhc3luYyAoKSA9Plxue1xuXHRjb25zdCB2ZXJzaW9uID0gcGFja2FnZUpzb24uY29uZmlnLnZlcnNpb247XG5cblx0bGV0IF9wYXRoID0gcGF0aC5qb2luKF9fcm9vdF9Tb3VyY2VUcmVlUG9ydGFibGUsICdBcHAnLCAnQXBwSW5mbycsICdhcHBpbmZvLmluaScpO1xuXG5cdGxldCBfaW5pOiB7XG5cdFx0VmVyc2lvbjoge1xuXHRcdFx0UGFja2FnZVZlcnNpb246IHN0cmluZyxcblx0XHRcdERpc3BsYXlWZXJzaW9uOiBzdHJpbmcsXG5cdFx0fVxuXHR9ID0gYXdhaXQgZnMucmVhZEZpbGUoX3BhdGgsICd1dGYtOCcpLnRoZW4oaW5pLnBhcnNlKTtcblxuXHRfaW5pLlZlcnNpb24uUGFja2FnZVZlcnNpb24gPSB2ZXJzaW9uO1xuXHRfaW5pLlZlcnNpb24uRGlzcGxheVZlcnNpb24gPSB2ZXJzaW9uLnNwbGl0KCcuJykuc2xpY2UoMCwgMykuam9pbignLicpO1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0Y29uc29sZS5kaXIoX2luaS5WZXJzaW9uKTtcblxuXHRhd2FpdCBmcy53cml0ZUZpbGUoX3BhdGgsIGluaS5zdHJpbmdpZnkoX2luaSkpO1xuXG5cdGxldCBfbnNoX2NvbnRleHQgPSBgXG4hbWFjcm8gQ3VzdG9tQ29kZVBvc3RJbnN0YWxsXG5cbjsgUHJlcGFyZSBmb2xkZXIgdG8gZXh0cmFjdCB3aXRoIDd6aXBcbkNyZWF0ZURpcmVjdG9yeSBcIiRJTlNURElSXFxcXDd6VGVtcFwiXG5TZXRPdXRQYXRoIFwiJElOU1RESVJcXFxcN3pUZW1wXCJcbkZpbGUgXCJcXCR7TlNJU0RJUn1cXFxcLi5cXFxcN3ppcFxcXFw3ei5leGVcIlxuRmlsZSBcIlxcJHtOU0lTRElSfVxcXFwuLlxcXFw3emlwXFxcXDd6LmRsbFwiXG5TZXRPdXRQYXRoICRJTlNURElSXG5DcmVhdGVEaXJlY3RvcnkgXCIkSU5TVERJUlxcXFxEYXRhXCJcblxuaW5ldGM6OmdldCAvQ09OTkVDVFRJTUVPVVQgMzAgL05PQ09PS0lFUyAvVFJBTlNMQVRFIFwiRG93bmxvYWRpbmcgU291cmNlVHJlZS4uLlwiIFwiQ29ubmVjdGluZy4uLlwiIHNlY29uZCBtaW51dGUgaG91ciBzIFwiJWRrQiAoJWQlJSkgb2YgJWRrQiBAICVkLiUwMWRrQi9zXCIgXCIgKCVkICVzJXMgcmVtYWluaW5nKVwiIFwiaHR0cHM6Ly9wcm9kdWN0LWRvd25sb2Fkcy5hdGxhc3NpYW4uY29tL3NvZnR3YXJlL3NvdXJjZXRyZWUvd2luZG93cy9nYS9Tb3VyY2VUcmVlU2V0dXAtJHtfaW5pLlZlcnNpb24uRGlzcGxheVZlcnNpb259LmV4ZVwiIFwiJElOU1RESVJcXFxcN3pUZW1wXFxcXFNvdXJjZVRyZWVTZXR1cC0ke19pbmkuVmVyc2lvbi5EaXNwbGF5VmVyc2lvbn0uZXhlXCIgL0VORFxuXG47IEV4dHJhY3RcbkV4ZWNET1M6OmV4ZWMgXFxgXCIkSU5TVERJUlxcXFw3elRlbXBcXFxcN3ouZXhlXCIgZSBcIiRJTlNURElSXFxcXDd6VGVtcFxcXFxTb3VyY2VUcmVlU2V0dXAtJHtfaW5pLlZlcnNpb24uRGlzcGxheVZlcnNpb259LmV4ZVwiIFwiU291cmNlVHJlZS0ke19pbmkuVmVyc2lvbi5EaXNwbGF5VmVyc2lvbn0tZnVsbC5udXBrZ1wiIC1vXCIkSU5TVERJUlxcXFw3elRlbXBcIlxcYCBcIlwiIFwiXCJcbkV4ZWNET1M6OmV4ZWMgXFxgXCIkSU5TVERJUlxcXFw3elRlbXBcXFxcN3ouZXhlXCIgeCBcIiRJTlNURElSXFxcXDd6VGVtcFxcXFxTb3VyY2VUcmVlLSR7X2luaS5WZXJzaW9uLkRpc3BsYXlWZXJzaW9ufS1mdWxsLm51cGtnXCIgXCJsaWJcXFxcbmV0NDVcIiAtb1wiJElOU1RESVJcXFxcN3pUZW1wXCJcXGAgXCJcIiBcIlwiXG5FeGVjRE9TOjpleGVjIFxcYHhjb3B5IFwiJElOU1RESVJcXFxcN3pUZW1wXFxcXGxpYlxcXFxuZXQ0NVwiIFwiJElOU1RESVJcXFxcQXBwXFxcXFNvdXJjZVRyZWVcIiAvUyAvaVxcYCBcIlwiIFwiXCJcblxuOyBDbGVhbnVwXG5STURpciAvciBcIiRJTlNURElSXFxcXDd6VGVtcFwiXG5cbiFtYWNyb2VuZFxuXG5gO1xuXG5cdGF3YWl0IGZzLndyaXRlRmlsZShwYXRoLmpvaW4oX19yb290X1NvdXJjZVRyZWVQb3J0YWJsZSwgJ090aGVyL1NvdXJjZS9Qb3J0YWJsZUFwcHMuY29tSW5zdGFsbGVyQ3VzdG9tLm5zaCcpLCBfbnNoX2NvbnRleHQpO1xuXG4vL1x0Y29uc29sZS5kaXIoX2luaSk7XG5cbn0pKCk7XG4iXX0=