"use strict";
/**
 * Created by user on 2019/4/12.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const packageJson = require("../package.json");
const index_1 = require("../index");
const debug_color2_1 = require("debug-color2");
const ini = require("ini");
(async () => {
    const version = packageJson.config.version;
    let _path = path.join(index_1.__root_SourceTreePortable, 'App', 'AppInfo', 'appinfo.ini');
    let _ini = await fs.readFile(_path, 'utf-8').then(ini.parse);
    _ini.Version.PackageVersion = version;
    _ini.Version.DisplayVersion = version.split('.').slice(0, 3).join('.');
    // @ts-ignore
    debug_color2_1.console.dir(_ini.Version);
    await fs.writeFile(_path, ini.stringify(_ini));
    let _nsh_context = `
!macro CustomCodePostInstall

; Prepare folder to extract with 7zip
CreateDirectory "$INSTDIR\\7zTemp"
SetOutPath "$INSTDIR\\7zTemp"
File "\${NSISDIR}\\..\\7zip\\7z.exe"
File "\${NSISDIR}\\..\\7zip\\7z.dll"
SetOutPath $INSTDIR
CreateDirectory "$INSTDIR\\Data"

inetc::get /CONNECTTIMEOUT 30 /NOCOOKIES /TRANSLATE "Downloading SourceTree..." "Connecting..." second minute hour s "%dkB (%d%%) of %dkB @ %d.%01dkB/s" " (%d %s%s remaining)" "https://product-downloads.atlassian.com/software/sourcetree/windows/ga/SourceTreeSetup-${_ini.Version.DisplayVersion}.exe" "$INSTDIR\\7zTemp\\SourceTreeSetup-${_ini.Version.DisplayVersion}.exe" /END

; Extract
ExecDOS::exec \`"$INSTDIR\\7zTemp\\7z.exe" e "$INSTDIR\\7zTemp\\SourceTreeSetup-${_ini.Version.DisplayVersion}.exe" "SourceTree-${_ini.Version.DisplayVersion}-full.nupkg" -o"$INSTDIR\\7zTemp"\` "" ""
ExecDOS::exec \`"$INSTDIR\\7zTemp\\7z.exe" x "$INSTDIR\\7zTemp\\SourceTree-${_ini.Version.DisplayVersion}-full.nupkg" "lib\\net45" -o"$INSTDIR\\7zTemp"\` "" ""
ExecDOS::exec \`xcopy "$INSTDIR\\7zTemp\\lib\\net45" "$INSTDIR\\App\\SourceTree" /S /i\` "" ""
ExecDOS::exec \`xcopy "$INSTDIR\\App\\DefaultData\\user.config" "$INSTDIR\\Data" /S /i\` "" ""

; Cleanup
RMDir /r "$INSTDIR\\7zTemp"

!macroend

`;
    await fs.writeFile(path.join(index_1.__root_SourceTreePortable, 'Other/Source/PortableApps.comInstallerCustom.nsh'), _nsh_context);
    //	console.dir(_ini);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZS1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILCtCQUFnQztBQUNoQyw2QkFBOEI7QUFDOUIsK0NBQWdEO0FBQ2hELG9DQUFvRjtBQUNwRiwrQ0FBdUM7QUFDdkMsMkJBQTRCO0FBRTVCLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFFWCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUUzQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlDQUF5QixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFbEYsSUFBSSxJQUFJLEdBS0osTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXRELElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQztJQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXZFLGFBQWE7SUFDYixzQkFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFMUIsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFL0MsSUFBSSxZQUFZLEdBQUc7Ozs7Ozs7Ozs7OzBRQVdzUCxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsNENBQTRDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYzs7O2tGQUcxUixJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMscUJBQXFCLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYzs2RUFDaEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjOzs7Ozs7Ozs7Q0FTdkcsQ0FBQztJQUVELE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlDQUF5QixFQUFFLGtEQUFrRCxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFNUgscUJBQXFCO0FBRXJCLENBQUMsQ0FBQyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE5LzQvMTIuXG4gKi9cblxuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IHBhY2thZ2VKc29uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XG5pbXBvcnQgeyBfX3JlbGVhc2VzX1NvdXJjZVRyZWVQb3J0YWJsZSwgX19yb290X1NvdXJjZVRyZWVQb3J0YWJsZSB9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IGNvbnNvbGUgfSBmcm9tICdkZWJ1Zy1jb2xvcjInO1xuaW1wb3J0IGluaSA9IHJlcXVpcmUoJ2luaScpO1xuXG4oYXN5bmMgKCkgPT5cbntcblx0Y29uc3QgdmVyc2lvbiA9IHBhY2thZ2VKc29uLmNvbmZpZy52ZXJzaW9uO1xuXG5cdGxldCBfcGF0aCA9IHBhdGguam9pbihfX3Jvb3RfU291cmNlVHJlZVBvcnRhYmxlLCAnQXBwJywgJ0FwcEluZm8nLCAnYXBwaW5mby5pbmknKTtcblxuXHRsZXQgX2luaToge1xuXHRcdFZlcnNpb246IHtcblx0XHRcdFBhY2thZ2VWZXJzaW9uOiBzdHJpbmcsXG5cdFx0XHREaXNwbGF5VmVyc2lvbjogc3RyaW5nLFxuXHRcdH1cblx0fSA9IGF3YWl0IGZzLnJlYWRGaWxlKF9wYXRoLCAndXRmLTgnKS50aGVuKGluaS5wYXJzZSk7XG5cblx0X2luaS5WZXJzaW9uLlBhY2thZ2VWZXJzaW9uID0gdmVyc2lvbjtcblx0X2luaS5WZXJzaW9uLkRpc3BsYXlWZXJzaW9uID0gdmVyc2lvbi5zcGxpdCgnLicpLnNsaWNlKDAsIDMpLmpvaW4oJy4nKTtcblxuXHQvLyBAdHMtaWdub3JlXG5cdGNvbnNvbGUuZGlyKF9pbmkuVmVyc2lvbik7XG5cblx0YXdhaXQgZnMud3JpdGVGaWxlKF9wYXRoLCBpbmkuc3RyaW5naWZ5KF9pbmkpKTtcblxuXHRsZXQgX25zaF9jb250ZXh0ID0gYFxuIW1hY3JvIEN1c3RvbUNvZGVQb3N0SW5zdGFsbFxuXG47IFByZXBhcmUgZm9sZGVyIHRvIGV4dHJhY3Qgd2l0aCA3emlwXG5DcmVhdGVEaXJlY3RvcnkgXCIkSU5TVERJUlxcXFw3elRlbXBcIlxuU2V0T3V0UGF0aCBcIiRJTlNURElSXFxcXDd6VGVtcFwiXG5GaWxlIFwiXFwke05TSVNESVJ9XFxcXC4uXFxcXDd6aXBcXFxcN3ouZXhlXCJcbkZpbGUgXCJcXCR7TlNJU0RJUn1cXFxcLi5cXFxcN3ppcFxcXFw3ei5kbGxcIlxuU2V0T3V0UGF0aCAkSU5TVERJUlxuQ3JlYXRlRGlyZWN0b3J5IFwiJElOU1RESVJcXFxcRGF0YVwiXG5cbmluZXRjOjpnZXQgL0NPTk5FQ1RUSU1FT1VUIDMwIC9OT0NPT0tJRVMgL1RSQU5TTEFURSBcIkRvd25sb2FkaW5nIFNvdXJjZVRyZWUuLi5cIiBcIkNvbm5lY3RpbmcuLi5cIiBzZWNvbmQgbWludXRlIGhvdXIgcyBcIiVka0IgKCVkJSUpIG9mICVka0IgQCAlZC4lMDFka0Ivc1wiIFwiICglZCAlcyVzIHJlbWFpbmluZylcIiBcImh0dHBzOi8vcHJvZHVjdC1kb3dubG9hZHMuYXRsYXNzaWFuLmNvbS9zb2Z0d2FyZS9zb3VyY2V0cmVlL3dpbmRvd3MvZ2EvU291cmNlVHJlZVNldHVwLSR7X2luaS5WZXJzaW9uLkRpc3BsYXlWZXJzaW9ufS5leGVcIiBcIiRJTlNURElSXFxcXDd6VGVtcFxcXFxTb3VyY2VUcmVlU2V0dXAtJHtfaW5pLlZlcnNpb24uRGlzcGxheVZlcnNpb259LmV4ZVwiIC9FTkRcblxuOyBFeHRyYWN0XG5FeGVjRE9TOjpleGVjIFxcYFwiJElOU1RESVJcXFxcN3pUZW1wXFxcXDd6LmV4ZVwiIGUgXCIkSU5TVERJUlxcXFw3elRlbXBcXFxcU291cmNlVHJlZVNldHVwLSR7X2luaS5WZXJzaW9uLkRpc3BsYXlWZXJzaW9ufS5leGVcIiBcIlNvdXJjZVRyZWUtJHtfaW5pLlZlcnNpb24uRGlzcGxheVZlcnNpb259LWZ1bGwubnVwa2dcIiAtb1wiJElOU1RESVJcXFxcN3pUZW1wXCJcXGAgXCJcIiBcIlwiXG5FeGVjRE9TOjpleGVjIFxcYFwiJElOU1RESVJcXFxcN3pUZW1wXFxcXDd6LmV4ZVwiIHggXCIkSU5TVERJUlxcXFw3elRlbXBcXFxcU291cmNlVHJlZS0ke19pbmkuVmVyc2lvbi5EaXNwbGF5VmVyc2lvbn0tZnVsbC5udXBrZ1wiIFwibGliXFxcXG5ldDQ1XCIgLW9cIiRJTlNURElSXFxcXDd6VGVtcFwiXFxgIFwiXCIgXCJcIlxuRXhlY0RPUzo6ZXhlYyBcXGB4Y29weSBcIiRJTlNURElSXFxcXDd6VGVtcFxcXFxsaWJcXFxcbmV0NDVcIiBcIiRJTlNURElSXFxcXEFwcFxcXFxTb3VyY2VUcmVlXCIgL1MgL2lcXGAgXCJcIiBcIlwiXG5FeGVjRE9TOjpleGVjIFxcYHhjb3B5IFwiJElOU1RESVJcXFxcQXBwXFxcXERlZmF1bHREYXRhXFxcXHVzZXIuY29uZmlnXCIgXCIkSU5TVERJUlxcXFxEYXRhXCIgL1MgL2lcXGAgXCJcIiBcIlwiXG5cbjsgQ2xlYW51cFxuUk1EaXIgL3IgXCIkSU5TVERJUlxcXFw3elRlbXBcIlxuXG4hbWFjcm9lbmRcblxuYDtcblxuXHRhd2FpdCBmcy53cml0ZUZpbGUocGF0aC5qb2luKF9fcm9vdF9Tb3VyY2VUcmVlUG9ydGFibGUsICdPdGhlci9Tb3VyY2UvUG9ydGFibGVBcHBzLmNvbUluc3RhbGxlckN1c3RvbS5uc2gnKSwgX25zaF9jb250ZXh0KTtcblxuLy9cdGNvbnNvbGUuZGlyKF9pbmkpO1xuXG59KSgpO1xuIl19